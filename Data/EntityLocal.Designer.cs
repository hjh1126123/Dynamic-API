//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2019/4/19 15:01:39
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace EntityLocal
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class DBContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DBContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertUUser(UUser instance);
        partial void UpdateUUser(UUser instance);
        partial void DeleteUUser(UUser instance);
        partial void InsertUVisiter(UVisiter instance);
        partial void UpdateUVisiter(UVisiter instance);
        partial void DeleteUVisiter(UVisiter instance);
        partial void InsertBParam(BParam instance);
        partial void UpdateBParam(BParam instance);
        partial void DeleteBParam(BParam instance);
        partial void InsertDMsSQL(DMsSQL instance);
        partial void UpdateDMsSQL(DMsSQL instance);
        partial void DeleteDMsSQL(DMsSQL instance);
        partial void InsertUPower(UPower instance);
        partial void UpdateUPower(UPower instance);
        partial void DeleteUPower(UPower instance);

        #endregion

        public DBContext() :
        base(GetConnectionString("Local"), mappingSource)
        {
            OnCreated();
        }

        public DBContext(MappingSource mappingSource) :
        base(GetConnectionString("Local"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DBContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<UUser> UUsers
        {
            get
            {
                return this.GetTable<UUser>();
            }
        }

        public Devart.Data.Linq.Table<UVisiter> UVisiters
        {
            get
            {
                return this.GetTable<UVisiter>();
            }
        }

        public Devart.Data.Linq.Table<BParam> BParams
        {
            get
            {
                return this.GetTable<BParam>();
            }
        }

        public Devart.Data.Linq.Table<DMsSQL> DMsSQLs
        {
            get
            {
                return this.GetTable<DMsSQL>();
            }
        }

        public Devart.Data.Linq.Table<UPower> UPowers
        {
            get
            {
                return this.GetTable<UPower>();
            }
        }
    }
}

namespace EntityLocal
{

    /// <summary>
    /// There are no comments for EntityLocal.UUser in the schema.
    /// </summary>
    [Table(Name = @"""main"".U_User")]
    public partial class UUser : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Userid;

        private string _Password;

        private string _Name;

        private string _Email;

        private long _Power = 0;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnUseridChanging(string value);
        partial void OnUseridChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnPowerChanging(long value);
        partial void OnPowerChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public UUser()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Userid in the schema.
        /// </summary>
        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging("Userid");
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"password", Storage = "_Password", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Power in the schema.
        /// </summary>
        [Column(Name = @"power", Storage = "_Power", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Power
        {
            get
            {
                return this._Power;
            }
            set
            {
                if (this._Power != value)
                {
                    this.OnPowerChanging(value);
                    this.SendPropertyChanging("Power");
                    this._Power = value;
                    this.SendPropertyChanged("Power");
                    this.OnPowerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.UVisiter in the schema.
    /// </summary>
    [Table(Name = @"""main"".U_Visiter")]
    public partial class UVisiter : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Ip;

        private string _Country;

        private string _Province;

        private string _City;

        private string _Mno;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnIpChanging(string value);
        partial void OnIpChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnProvinceChanging(string value);
        partial void OnProvinceChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnMnoChanging(string value);
        partial void OnMnoChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public UVisiter()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Ip in the schema.
        /// </summary>
        [Column(Name = @"ip", Storage = "_Ip", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ip
        {
            get
            {
                return this._Ip;
            }
            set
            {
                if (this._Ip != value)
                {
                    this.OnIpChanging(value);
                    this.SendPropertyChanging("Ip");
                    this._Ip = value;
                    this.SendPropertyChanged("Ip");
                    this.OnIpChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Name = @"country", Storage = "_Country", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging("Country");
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Province in the schema.
        /// </summary>
        [Column(Name = @"province", Storage = "_Province", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Province
        {
            get
            {
                return this._Province;
            }
            set
            {
                if (this._Province != value)
                {
                    this.OnProvinceChanging(value);
                    this.SendPropertyChanging("Province");
                    this._Province = value;
                    this.SendPropertyChanged("Province");
                    this.OnProvinceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Name = @"city", Storage = "_City", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging("City");
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mno in the schema.
        /// </summary>
        [Column(Name = @"mno", Storage = "_Mno", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Mno
        {
            get
            {
                return this._Mno;
            }
            set
            {
                if (this._Mno != value)
                {
                    this.OnMnoChanging(value);
                    this.SendPropertyChanging("Mno");
                    this._Mno = value;
                    this.SendPropertyChanged("Mno");
                    this.OnMnoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.BParam in the schema.
    /// </summary>
    [Table(Name = @"""main"".B_Params")]
    public partial class BParam : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _Pid;

        private string _Name;

        private string _Key;

        private string _Describe;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnPidChanging(long value);
        partial void OnPidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnKeyChanging(string value);
        partial void OnKeyChanged();
        partial void OnDescribeChanging(string value);
        partial void OnDescribeChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public BParam()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Pid in the schema.
        /// </summary>
        [Column(Name = @"pid", Storage = "_Pid", CanBeNull = false, DbType = "BIGINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Pid
        {
            get
            {
                return this._Pid;
            }
            set
            {
                if (this._Pid != value)
                {
                    this.OnPidChanging(value);
                    this.SendPropertyChanging("Pid");
                    this._Pid = value;
                    this.SendPropertyChanged("Pid");
                    this.OnPidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Key in the schema.
        /// </summary>
        [Column(Name = @"""key""", Storage = "_Key", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Key
        {
            get
            {
                return this._Key;
            }
            set
            {
                if (this._Key != value)
                {
                    this.OnKeyChanging(value);
                    this.SendPropertyChanging("Key");
                    this._Key = value;
                    this.SendPropertyChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Describe in the schema.
        /// </summary>
        [Column(Name = @"describe", Storage = "_Describe", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Describe
        {
            get
            {
                return this._Describe;
            }
            set
            {
                if (this._Describe != value)
                {
                    this.OnDescribeChanging(value);
                    this.SendPropertyChanging("Describe");
                    this._Describe = value;
                    this.SendPropertyChanged("Describe");
                    this.OnDescribeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.DMsSQL in the schema.
    /// </summary>
    [Table(Name = @"""main"".D_MsSQL")]
    public partial class DMsSQL : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Group;

        private string _Active;

        private string _Sql;

        private string _Pid;

        private string _Operator;

        private System.DateTime _Createtime;

        private System.DateTime _Systime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnGroupChanging(string value);
        partial void OnGroupChanged();
        partial void OnActiveChanging(string value);
        partial void OnActiveChanged();
        partial void OnSqlChanging(string value);
        partial void OnSqlChanged();
        partial void OnPidChanging(string value);
        partial void OnPidChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        #endregion

        public DMsSQL()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Group in the schema.
        /// </summary>
        [Column(Name = @"""group""", Storage = "_Group", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Group
        {
            get
            {
                return this._Group;
            }
            set
            {
                if (this._Group != value)
                {
                    this.OnGroupChanging(value);
                    this.SendPropertyChanging("Group");
                    this._Group = value;
                    this.SendPropertyChanged("Group");
                    this.OnGroupChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [Column(Name = @"active", Storage = "_Active", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging("Active");
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sql in the schema.
        /// </summary>
        [Column(Name = @"sql", Storage = "_Sql", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Sql
        {
            get
            {
                return this._Sql;
            }
            set
            {
                if (this._Sql != value)
                {
                    this.OnSqlChanging(value);
                    this.SendPropertyChanging("Sql");
                    this._Sql = value;
                    this.SendPropertyChanged("Sql");
                    this.OnSqlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Pid in the schema.
        /// </summary>
        [Column(Name = @"pid", Storage = "_Pid", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Pid
        {
            get
            {
                return this._Pid;
            }
            set
            {
                if (this._Pid != value)
                {
                    this.OnPidChanging(value);
                    this.SendPropertyChanging("Pid");
                    this._Pid = value;
                    this.SendPropertyChanged("Pid");
                    this.OnPidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.UPower in the schema.
    /// </summary>
    [Table(Name = @"""main"".U_Power")]
    public partial class UPower : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _Powerid;

        private string _Ableuser;

        private System.DateTime _Createtime;

        private System.DateTime _Systime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnPoweridChanging(long value);
        partial void OnPoweridChanged();
        partial void OnAbleuserChanging(string value);
        partial void OnAbleuserChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        #endregion

        public UPower()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Powerid in the schema.
        /// </summary>
        [Column(Name = @"powerid", Storage = "_Powerid", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Powerid
        {
            get
            {
                return this._Powerid;
            }
            set
            {
                if (this._Powerid != value)
                {
                    this.OnPoweridChanging(value);
                    this.SendPropertyChanging("Powerid");
                    this._Powerid = value;
                    this.SendPropertyChanged("Powerid");
                    this.OnPoweridChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ableuser in the schema.
        /// </summary>
        [Column(Name = @"ableuser", Storage = "_Ableuser", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ableuser
        {
            get
            {
                return this._Ableuser;
            }
            set
            {
                if (this._Ableuser != value)
                {
                    this.OnAbleuserChanging(value);
                    this.SendPropertyChanging("Ableuser");
                    this._Ableuser = value;
                    this.SendPropertyChanged("Ableuser");
                    this.OnAbleuserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
