//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2019/4/23 17:55:39
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace EntityLocal
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class DBLocal : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DBLocal));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertBActive(BActive instance);
        partial void UpdateBActive(BActive instance);
        partial void DeleteBActive(BActive instance);
        partial void InsertBGroup(BGroup instance);
        partial void UpdateBGroup(BGroup instance);
        partial void DeleteBGroup(BGroup instance);
        partial void InsertBParam(BParam instance);
        partial void UpdateBParam(BParam instance);
        partial void DeleteBParam(BParam instance);
        partial void InsertCBar(CBar instance);
        partial void UpdateCBar(CBar instance);
        partial void DeleteCBar(CBar instance);
        partial void InsertCCircle(CCircle instance);
        partial void UpdateCCircle(CCircle instance);
        partial void DeleteCCircle(CCircle instance);
        partial void InsertCOther(COther instance);
        partial void UpdateCOther(COther instance);
        partial void DeleteCOther(COther instance);
        partial void InsertDMsSQL(DMsSQL instance);
        partial void UpdateDMsSQL(DMsSQL instance);
        partial void DeleteDMsSQL(DMsSQL instance);
        partial void InsertIApi(IApi instance);
        partial void UpdateIApi(IApi instance);
        partial void DeleteIApi(IApi instance);
        partial void InsertSLog(SLog instance);
        partial void UpdateSLog(SLog instance);
        partial void DeleteSLog(SLog instance);

        #endregion

        public DBLocal() :
        base(GetConnectionString("Local"), mappingSource)
        {
            OnCreated();
        }

        public DBLocal(MappingSource mappingSource) :
        base(GetConnectionString("Local"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DBLocal(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBLocal(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBLocal(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBLocal(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<BActive> BActives
        {
            get
            {
                return this.GetTable<BActive>();
            }
        }

        public Devart.Data.Linq.Table<BGroup> BGroups
        {
            get
            {
                return this.GetTable<BGroup>();
            }
        }

        public Devart.Data.Linq.Table<BParam> BParams
        {
            get
            {
                return this.GetTable<BParam>();
            }
        }

        public Devart.Data.Linq.Table<CBar> CBars
        {
            get
            {
                return this.GetTable<CBar>();
            }
        }

        public Devart.Data.Linq.Table<CCircle> CCircles
        {
            get
            {
                return this.GetTable<CCircle>();
            }
        }

        public Devart.Data.Linq.Table<COther> COther
        {
            get
            {
                return this.GetTable<COther>();
            }
        }

        public Devart.Data.Linq.Table<DMsSQL> DMsSQLs
        {
            get
            {
                return this.GetTable<DMsSQL>();
            }
        }

        public Devart.Data.Linq.Table<IApi> IApis
        {
            get
            {
                return this.GetTable<IApi>();
            }
        }

        public Devart.Data.Linq.Table<SLog> SLogs
        {
            get
            {
                return this.GetTable<SLog>();
            }
        }
    }
}

namespace EntityLocal
{

    /// <summary>
    /// There are no comments for EntityLocal.BActive in the schema.
    /// </summary>
    [Table(Name = @"""main"".B_Active")]
    public partial class BActive : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Aid;

        private string _Gid;

        private string _Aname;

        private string _Adescribe;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnAidChanging(string value);
        partial void OnAidChanged();
        partial void OnGidChanging(string value);
        partial void OnGidChanged();
        partial void OnAnameChanging(string value);
        partial void OnAnameChanged();
        partial void OnAdescribeChanging(string value);
        partial void OnAdescribeChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public BActive()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Aid in the schema.
        /// </summary>
        [Column(Name = @"aid", Storage = "_Aid", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Aid
        {
            get
            {
                return this._Aid;
            }
            set
            {
                if (this._Aid != value)
                {
                    this.OnAidChanging(value);
                    this.SendPropertyChanging("Aid");
                    this._Aid = value;
                    this.SendPropertyChanged("Aid");
                    this.OnAidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gid in the schema.
        /// </summary>
        [Column(Name = @"gid", Storage = "_Gid", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Gid
        {
            get
            {
                return this._Gid;
            }
            set
            {
                if (this._Gid != value)
                {
                    this.OnGidChanging(value);
                    this.SendPropertyChanging("Gid");
                    this._Gid = value;
                    this.SendPropertyChanged("Gid");
                    this.OnGidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Aname in the schema.
        /// </summary>
        [Column(Name = @"aname", Storage = "_Aname", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Aname
        {
            get
            {
                return this._Aname;
            }
            set
            {
                if (this._Aname != value)
                {
                    this.OnAnameChanging(value);
                    this.SendPropertyChanging("Aname");
                    this._Aname = value;
                    this.SendPropertyChanged("Aname");
                    this.OnAnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Adescribe in the schema.
        /// </summary>
        [Column(Name = @"adescribe", Storage = "_Adescribe", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Adescribe
        {
            get
            {
                return this._Adescribe;
            }
            set
            {
                if (this._Adescribe != value)
                {
                    this.OnAdescribeChanging(value);
                    this.SendPropertyChanging("Adescribe");
                    this._Adescribe = value;
                    this.SendPropertyChanged("Adescribe");
                    this.OnAdescribeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.BGroup in the schema.
    /// </summary>
    [Table(Name = @"""main"".B_Group")]
    public partial class BGroup : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Gid;

        private string _Gname;

        private string _Gdescribe;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnGidChanging(string value);
        partial void OnGidChanged();
        partial void OnGnameChanging(string value);
        partial void OnGnameChanged();
        partial void OnGdescribeChanging(string value);
        partial void OnGdescribeChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public BGroup()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Gid in the schema.
        /// </summary>
        [Column(Name = @"gid", Storage = "_Gid", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Gid
        {
            get
            {
                return this._Gid;
            }
            set
            {
                if (this._Gid != value)
                {
                    this.OnGidChanging(value);
                    this.SendPropertyChanging("Gid");
                    this._Gid = value;
                    this.SendPropertyChanged("Gid");
                    this.OnGidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gname in the schema.
        /// </summary>
        [Column(Name = @"gname", Storage = "_Gname", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Gname
        {
            get
            {
                return this._Gname;
            }
            set
            {
                if (this._Gname != value)
                {
                    this.OnGnameChanging(value);
                    this.SendPropertyChanging("Gname");
                    this._Gname = value;
                    this.SendPropertyChanged("Gname");
                    this.OnGnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gdescribe in the schema.
        /// </summary>
        [Column(Name = @"gdescribe", Storage = "_Gdescribe", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Gdescribe
        {
            get
            {
                return this._Gdescribe;
            }
            set
            {
                if (this._Gdescribe != value)
                {
                    this.OnGdescribeChanging(value);
                    this.SendPropertyChanging("Gdescribe");
                    this._Gdescribe = value;
                    this.SendPropertyChanged("Gdescribe");
                    this.OnGdescribeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.BParam in the schema.
    /// </summary>
    [Table(Name = @"""main"".B_Params")]
    public partial class BParam : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Pid;

        private string _Name;

        private string _Key;

        private string _Describe;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnPidChanging(string value);
        partial void OnPidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnKeyChanging(string value);
        partial void OnKeyChanged();
        partial void OnDescribeChanging(string value);
        partial void OnDescribeChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public BParam()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Pid in the schema.
        /// </summary>
        [Column(Name = @"pid", Storage = "_Pid", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Pid
        {
            get
            {
                return this._Pid;
            }
            set
            {
                if (this._Pid != value)
                {
                    this.OnPidChanging(value);
                    this.SendPropertyChanging("Pid");
                    this._Pid = value;
                    this.SendPropertyChanged("Pid");
                    this.OnPidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Key in the schema.
        /// </summary>
        [Column(Name = @"""key""", Storage = "_Key", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Key
        {
            get
            {
                return this._Key;
            }
            set
            {
                if (this._Key != value)
                {
                    this.OnKeyChanging(value);
                    this.SendPropertyChanging("Key");
                    this._Key = value;
                    this.SendPropertyChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Describe in the schema.
        /// </summary>
        [Column(Name = @"describe", Storage = "_Describe", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Describe
        {
            get
            {
                return this._Describe;
            }
            set
            {
                if (this._Describe != value)
                {
                    this.OnDescribeChanging(value);
                    this.SendPropertyChanging("Describe");
                    this._Describe = value;
                    this.SendPropertyChanged("Describe");
                    this.OnDescribeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.CBar in the schema.
    /// </summary>
    [Table(Name = @"""main"".C_Bar")]
    public partial class CBar : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Cid;

        private string _Name;

        private string _Prefix;

        private string _X;

        private string _Y;

        private string _Suffix;

        private string _Otherdata;

        private string _Describe;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnCidChanging(string value);
        partial void OnCidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPrefixChanging(string value);
        partial void OnPrefixChanged();
        partial void OnXChanging(string value);
        partial void OnXChanged();
        partial void OnYChanging(string value);
        partial void OnYChanged();
        partial void OnSuffixChanging(string value);
        partial void OnSuffixChanged();
        partial void OnOtherdataChanging(string value);
        partial void OnOtherdataChanged();
        partial void OnDescribeChanging(string value);
        partial void OnDescribeChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public CBar()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Cid in the schema.
        /// </summary>
        [Column(Name = @"cid", Storage = "_Cid", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Cid
        {
            get
            {
                return this._Cid;
            }
            set
            {
                if (this._Cid != value)
                {
                    this.OnCidChanging(value);
                    this.SendPropertyChanging("Cid");
                    this._Cid = value;
                    this.SendPropertyChanged("Cid");
                    this.OnCidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Prefix in the schema.
        /// </summary>
        [Column(Name = @"prefix", Storage = "_Prefix", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Prefix
        {
            get
            {
                return this._Prefix;
            }
            set
            {
                if (this._Prefix != value)
                {
                    this.OnPrefixChanging(value);
                    this.SendPropertyChanging("Prefix");
                    this._Prefix = value;
                    this.SendPropertyChanged("Prefix");
                    this.OnPrefixChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for X in the schema.
        /// </summary>
        [Column(Name = @"x", Storage = "_X", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string X
        {
            get
            {
                return this._X;
            }
            set
            {
                if (this._X != value)
                {
                    this.OnXChanging(value);
                    this.SendPropertyChanging("X");
                    this._X = value;
                    this.SendPropertyChanged("X");
                    this.OnXChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Y in the schema.
        /// </summary>
        [Column(Name = @"y", Storage = "_Y", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Y
        {
            get
            {
                return this._Y;
            }
            set
            {
                if (this._Y != value)
                {
                    this.OnYChanging(value);
                    this.SendPropertyChanging("Y");
                    this._Y = value;
                    this.SendPropertyChanged("Y");
                    this.OnYChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Suffix in the schema.
        /// </summary>
        [Column(Storage = "_Suffix", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Suffix
        {
            get
            {
                return this._Suffix;
            }
            set
            {
                if (this._Suffix != value)
                {
                    this.OnSuffixChanging(value);
                    this.SendPropertyChanging("Suffix");
                    this._Suffix = value;
                    this.SendPropertyChanged("Suffix");
                    this.OnSuffixChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Otherdata in the schema.
        /// </summary>
        [Column(Name = @"otherdata", Storage = "_Otherdata", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Otherdata
        {
            get
            {
                return this._Otherdata;
            }
            set
            {
                if (this._Otherdata != value)
                {
                    this.OnOtherdataChanging(value);
                    this.SendPropertyChanging("Otherdata");
                    this._Otherdata = value;
                    this.SendPropertyChanged("Otherdata");
                    this.OnOtherdataChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Describe in the schema.
        /// </summary>
        [Column(Name = @"describe", Storage = "_Describe", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Describe
        {
            get
            {
                return this._Describe;
            }
            set
            {
                if (this._Describe != value)
                {
                    this.OnDescribeChanging(value);
                    this.SendPropertyChanging("Describe");
                    this._Describe = value;
                    this.SendPropertyChanged("Describe");
                    this.OnDescribeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.CCircle in the schema.
    /// </summary>
    [Table(Name = @"""main"".C_Circle")]
    public partial class CCircle : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Cid;

        private string _Name;

        private string _Prefix;

        private string _Data;

        private string _Suffix;

        private string _Otherdata;

        private string _Describe;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnCidChanging(string value);
        partial void OnCidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPrefixChanging(string value);
        partial void OnPrefixChanged();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        partial void OnSuffixChanging(string value);
        partial void OnSuffixChanged();
        partial void OnOtherdataChanging(string value);
        partial void OnOtherdataChanged();
        partial void OnDescribeChanging(string value);
        partial void OnDescribeChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public CCircle()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Cid in the schema.
        /// </summary>
        [Column(Name = @"cid", Storage = "_Cid", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Cid
        {
            get
            {
                return this._Cid;
            }
            set
            {
                if (this._Cid != value)
                {
                    this.OnCidChanging(value);
                    this.SendPropertyChanging("Cid");
                    this._Cid = value;
                    this.SendPropertyChanged("Cid");
                    this.OnCidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Prefix in the schema.
        /// </summary>
        [Column(Name = @"prefix", Storage = "_Prefix", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Prefix
        {
            get
            {
                return this._Prefix;
            }
            set
            {
                if (this._Prefix != value)
                {
                    this.OnPrefixChanging(value);
                    this.SendPropertyChanging("Prefix");
                    this._Prefix = value;
                    this.SendPropertyChanged("Prefix");
                    this.OnPrefixChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Data in the schema.
        /// </summary>
        [Column(Name = @"data", Storage = "_Data", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if (this._Data != value)
                {
                    this.OnDataChanging(value);
                    this.SendPropertyChanging("Data");
                    this._Data = value;
                    this.SendPropertyChanged("Data");
                    this.OnDataChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Suffix in the schema.
        /// </summary>
        [Column(Name = @"suffix", Storage = "_Suffix", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Suffix
        {
            get
            {
                return this._Suffix;
            }
            set
            {
                if (this._Suffix != value)
                {
                    this.OnSuffixChanging(value);
                    this.SendPropertyChanging("Suffix");
                    this._Suffix = value;
                    this.SendPropertyChanged("Suffix");
                    this.OnSuffixChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Otherdata in the schema.
        /// </summary>
        [Column(Name = @"otherdata", Storage = "_Otherdata", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Otherdata
        {
            get
            {
                return this._Otherdata;
            }
            set
            {
                if (this._Otherdata != value)
                {
                    this.OnOtherdataChanging(value);
                    this.SendPropertyChanging("Otherdata");
                    this._Otherdata = value;
                    this.SendPropertyChanged("Otherdata");
                    this.OnOtherdataChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Describe in the schema.
        /// </summary>
        [Column(Name = @"describe", Storage = "_Describe", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Describe
        {
            get
            {
                return this._Describe;
            }
            set
            {
                if (this._Describe != value)
                {
                    this.OnDescribeChanging(value);
                    this.SendPropertyChanging("Describe");
                    this._Describe = value;
                    this.SendPropertyChanged("Describe");
                    this.OnDescribeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.COther in the schema.
    /// </summary>
    [Table(Name = @"""main"".C_Other")]
    public partial class COther : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Cid;

        private string _Data;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnCidChanging(string value);
        partial void OnCidChanged();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public COther()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Cid in the schema.
        /// </summary>
        [Column(Name = @"cid", Storage = "_Cid", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Cid
        {
            get
            {
                return this._Cid;
            }
            set
            {
                if (this._Cid != value)
                {
                    this.OnCidChanging(value);
                    this.SendPropertyChanging("Cid");
                    this._Cid = value;
                    this.SendPropertyChanged("Cid");
                    this.OnCidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Data in the schema.
        /// </summary>
        [Column(Name = @"data", Storage = "_Data", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if (this._Data != value)
                {
                    this.OnDataChanging(value);
                    this.SendPropertyChanging("Data");
                    this._Data = value;
                    this.SendPropertyChanged("Data");
                    this.OnDataChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.DMsSQL in the schema.
    /// </summary>
    [Table(Name = @"""main"".D_MsSQL")]
    public partial class DMsSQL : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Sid;

        private string _Aid;

        private string _Apikey;

        private string _Sql;

        private string _Paramskey;

        private string _Timekey;

        private string _Totalkey;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnSidChanging(string value);
        partial void OnSidChanged();
        partial void OnAidChanging(string value);
        partial void OnAidChanged();
        partial void OnApikeyChanging(string value);
        partial void OnApikeyChanged();
        partial void OnSqlChanging(string value);
        partial void OnSqlChanged();
        partial void OnParamskeyChanging(string value);
        partial void OnParamskeyChanged();
        partial void OnTimekeyChanging(string value);
        partial void OnTimekeyChanged();
        partial void OnTotalkeyChanging(string value);
        partial void OnTotalkeyChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public DMsSQL()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Sid in the schema.
        /// </summary>
        [Column(Name = @"sid", Storage = "_Sid", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Sid
        {
            get
            {
                return this._Sid;
            }
            set
            {
                if (this._Sid != value)
                {
                    this.OnSidChanging(value);
                    this.SendPropertyChanging("Sid");
                    this._Sid = value;
                    this.SendPropertyChanged("Sid");
                    this.OnSidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Aid in the schema.
        /// </summary>
        [Column(Name = @"aid", Storage = "_Aid", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Aid
        {
            get
            {
                return this._Aid;
            }
            set
            {
                if (this._Aid != value)
                {
                    this.OnAidChanging(value);
                    this.SendPropertyChanging("Aid");
                    this._Aid = value;
                    this.SendPropertyChanged("Aid");
                    this.OnAidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Apikey in the schema.
        /// </summary>
        [Column(Name = @"apikey", Storage = "_Apikey", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Apikey
        {
            get
            {
                return this._Apikey;
            }
            set
            {
                if (this._Apikey != value)
                {
                    this.OnApikeyChanging(value);
                    this.SendPropertyChanging("Apikey");
                    this._Apikey = value;
                    this.SendPropertyChanged("Apikey");
                    this.OnApikeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sql in the schema.
        /// </summary>
        [Column(Name = @"sql", Storage = "_Sql", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Sql
        {
            get
            {
                return this._Sql;
            }
            set
            {
                if (this._Sql != value)
                {
                    this.OnSqlChanging(value);
                    this.SendPropertyChanging("Sql");
                    this._Sql = value;
                    this.SendPropertyChanged("Sql");
                    this.OnSqlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Paramskey in the schema.
        /// </summary>
        [Column(Name = @"paramskey", Storage = "_Paramskey", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Paramskey
        {
            get
            {
                return this._Paramskey;
            }
            set
            {
                if (this._Paramskey != value)
                {
                    this.OnParamskeyChanging(value);
                    this.SendPropertyChanging("Paramskey");
                    this._Paramskey = value;
                    this.SendPropertyChanged("Paramskey");
                    this.OnParamskeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Timekey in the schema.
        /// </summary>
        [Column(Name = @"timekey", Storage = "_Timekey", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Timekey
        {
            get
            {
                return this._Timekey;
            }
            set
            {
                if (this._Timekey != value)
                {
                    this.OnTimekeyChanging(value);
                    this.SendPropertyChanging("Timekey");
                    this._Timekey = value;
                    this.SendPropertyChanged("Timekey");
                    this.OnTimekeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Totalkey in the schema.
        /// </summary>
        [Column(Name = @"totalkey", Storage = "_Totalkey", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Totalkey
        {
            get
            {
                return this._Totalkey;
            }
            set
            {
                if (this._Totalkey != value)
                {
                    this.OnTotalkeyChanging(value);
                    this.SendPropertyChanging("Totalkey");
                    this._Totalkey = value;
                    this.SendPropertyChanged("Totalkey");
                    this.OnTotalkeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.IApi in the schema.
    /// </summary>
    [Table(Name = @"""main"".I_Api")]
    public partial class IApi : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Apikey;

        private string _RequestKey;

        private string _Apiname;

        private string _Apidescribe;

        private string _Cid;

        private string _Sid;

        private string _Pattern;

        private string _Chart;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnApikeyChanging(string value);
        partial void OnApikeyChanged();
        partial void OnRequestKeyChanging(string value);
        partial void OnRequestKeyChanged();
        partial void OnApinameChanging(string value);
        partial void OnApinameChanged();
        partial void OnApidescribeChanging(string value);
        partial void OnApidescribeChanged();
        partial void OnCidChanging(string value);
        partial void OnCidChanged();
        partial void OnSidChanging(string value);
        partial void OnSidChanged();
        partial void OnPatternChanging(string value);
        partial void OnPatternChanged();
        partial void OnChartChanging(string value);
        partial void OnChartChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public IApi()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Apikey in the schema.
        /// </summary>
        [Column(Name = @"apikey", Storage = "_Apikey", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Apikey
        {
            get
            {
                return this._Apikey;
            }
            set
            {
                if (this._Apikey != value)
                {
                    this.OnApikeyChanging(value);
                    this.SendPropertyChanging("Apikey");
                    this._Apikey = value;
                    this.SendPropertyChanged("Apikey");
                    this.OnApikeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequestKey in the schema.
        /// </summary>
        [Column(Name = @"requestKey", Storage = "_RequestKey", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string RequestKey
        {
            get
            {
                return this._RequestKey;
            }
            set
            {
                if (this._RequestKey != value)
                {
                    this.OnRequestKeyChanging(value);
                    this.SendPropertyChanging("RequestKey");
                    this._RequestKey = value;
                    this.SendPropertyChanged("RequestKey");
                    this.OnRequestKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Apiname in the schema.
        /// </summary>
        [Column(Name = @"apiname", Storage = "_Apiname", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Apiname
        {
            get
            {
                return this._Apiname;
            }
            set
            {
                if (this._Apiname != value)
                {
                    this.OnApinameChanging(value);
                    this.SendPropertyChanging("Apiname");
                    this._Apiname = value;
                    this.SendPropertyChanged("Apiname");
                    this.OnApinameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Apidescribe in the schema.
        /// </summary>
        [Column(Name = @"apidescribe", Storage = "_Apidescribe", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Apidescribe
        {
            get
            {
                return this._Apidescribe;
            }
            set
            {
                if (this._Apidescribe != value)
                {
                    this.OnApidescribeChanging(value);
                    this.SendPropertyChanging("Apidescribe");
                    this._Apidescribe = value;
                    this.SendPropertyChanged("Apidescribe");
                    this.OnApidescribeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cid in the schema.
        /// </summary>
        [Column(Name = @"cid", Storage = "_Cid", DbType = "CHAR", UpdateCheck = UpdateCheck.Never)]
        public string Cid
        {
            get
            {
                return this._Cid;
            }
            set
            {
                if (this._Cid != value)
                {
                    this.OnCidChanging(value);
                    this.SendPropertyChanging("Cid");
                    this._Cid = value;
                    this.SendPropertyChanged("Cid");
                    this.OnCidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sid in the schema.
        /// </summary>
        [Column(Name = @"sid", Storage = "_Sid", DbType = "CHAR", UpdateCheck = UpdateCheck.Never)]
        public string Sid
        {
            get
            {
                return this._Sid;
            }
            set
            {
                if (this._Sid != value)
                {
                    this.OnSidChanging(value);
                    this.SendPropertyChanging("Sid");
                    this._Sid = value;
                    this.SendPropertyChanged("Sid");
                    this.OnSidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Pattern in the schema.
        /// </summary>
        [Column(Name = @"pattern", Storage = "_Pattern", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Pattern
        {
            get
            {
                return this._Pattern;
            }
            set
            {
                if (this._Pattern != value)
                {
                    this.OnPatternChanging(value);
                    this.SendPropertyChanging("Pattern");
                    this._Pattern = value;
                    this.SendPropertyChanged("Pattern");
                    this.OnPatternChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Chart in the schema.
        /// </summary>
        [Column(Name = @"chart", Storage = "_Chart", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Chart
        {
            get
            {
                return this._Chart;
            }
            set
            {
                if (this._Chart != value)
                {
                    this.OnChartChanging(value);
                    this.SendPropertyChanging("Chart");
                    this._Chart = value;
                    this.SendPropertyChanged("Chart");
                    this.OnChartChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.SLog in the schema.
    /// </summary>
    [Table(Name = @"""main"".S_Log")]
    public partial class SLog : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Name;

        private string _Log;

        private int _Level;

        private bool _Isok;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnLogChanging(string value);
        partial void OnLogChanged();
        partial void OnLevelChanging(int value);
        partial void OnLevelChanged();
        partial void OnIsokChanging(bool value);
        partial void OnIsokChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public SLog()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Log in the schema.
        /// </summary>
        [Column(Name = @"log", Storage = "_Log", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Log
        {
            get
            {
                return this._Log;
            }
            set
            {
                if (this._Log != value)
                {
                    this.OnLogChanging(value);
                    this.SendPropertyChanging("Log");
                    this._Log = value;
                    this.SendPropertyChanged("Log");
                    this.OnLogChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Level in the schema.
        /// </summary>
        [Column(Name = @"level", Storage = "_Level", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Level
        {
            get
            {
                return this._Level;
            }
            set
            {
                if (this._Level != value)
                {
                    this.OnLevelChanging(value);
                    this.SendPropertyChanging("Level");
                    this._Level = value;
                    this.SendPropertyChanged("Level");
                    this.OnLevelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Isok in the schema.
        /// </summary>
        [Column(Name = @"isok", Storage = "_Isok", CanBeNull = false, DbType = "BOOLEAN NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Isok
        {
            get
            {
                return this._Isok;
            }
            set
            {
                if (this._Isok != value)
                {
                    this.OnIsokChanging(value);
                    this.SendPropertyChanging("Isok");
                    this._Isok = value;
                    this.SendPropertyChanged("Isok");
                    this.OnIsokChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
