//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2019/4/22 17:48:18
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace EntityLocal
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class DBContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DBContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertUUser(UUser instance);
        partial void UpdateUUser(UUser instance);
        partial void DeleteUUser(UUser instance);
        partial void InsertUPower(UPower instance);
        partial void UpdateUPower(UPower instance);
        partial void DeleteUPower(UPower instance);
        partial void InsertUVisiter(UVisiter instance);
        partial void UpdateUVisiter(UVisiter instance);
        partial void DeleteUVisiter(UVisiter instance);
        partial void InsertBParam(BParam instance);
        partial void UpdateBParam(BParam instance);
        partial void DeleteBParam(BParam instance);
        partial void InsertDMsSQL(DMsSQL instance);
        partial void UpdateDMsSQL(DMsSQL instance);
        partial void DeleteDMsSQL(DMsSQL instance);
        partial void InsertCBar(CBar instance);
        partial void UpdateCBar(CBar instance);
        partial void DeleteCBar(CBar instance);
        partial void InsertCCircle(CCircle instance);
        partial void UpdateCCircle(CCircle instance);
        partial void DeleteCCircle(CCircle instance);
        partial void InsertIApi(IApi instance);
        partial void UpdateIApi(IApi instance);
        partial void DeleteIApi(IApi instance);
        partial void InsertBGroup(BGroup instance);
        partial void UpdateBGroup(BGroup instance);
        partial void DeleteBGroup(BGroup instance);
        partial void InsertBActive(BActive instance);
        partial void UpdateBActive(BActive instance);
        partial void DeleteBActive(BActive instance);

        #endregion

        public DBContext() :
        base(GetConnectionString("Local"), mappingSource)
        {
            OnCreated();
        }

        public DBContext(MappingSource mappingSource) :
        base(GetConnectionString("Local"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DBContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<UUser> UUsers
        {
            get
            {
                return this.GetTable<UUser>();
            }
        }

        public Devart.Data.Linq.Table<UPower> UPowers
        {
            get
            {
                return this.GetTable<UPower>();
            }
        }

        public Devart.Data.Linq.Table<UVisiter> UVisiters
        {
            get
            {
                return this.GetTable<UVisiter>();
            }
        }

        public Devart.Data.Linq.Table<BParam> BParams
        {
            get
            {
                return this.GetTable<BParam>();
            }
        }

        public Devart.Data.Linq.Table<DMsSQL> DMsSQLs
        {
            get
            {
                return this.GetTable<DMsSQL>();
            }
        }

        public Devart.Data.Linq.Table<CBar> CBars
        {
            get
            {
                return this.GetTable<CBar>();
            }
        }

        public Devart.Data.Linq.Table<CCircle> CCircles
        {
            get
            {
                return this.GetTable<CCircle>();
            }
        }

        public Devart.Data.Linq.Table<IApi> IApis
        {
            get
            {
                return this.GetTable<IApi>();
            }
        }

        public Devart.Data.Linq.Table<BGroup> BGroups
        {
            get
            {
                return this.GetTable<BGroup>();
            }
        }

        public Devart.Data.Linq.Table<BActive> BActives
        {
            get
            {
                return this.GetTable<BActive>();
            }
        }
    }
}

namespace EntityLocal
{

    /// <summary>
    /// There are no comments for EntityLocal.UUser in the schema.
    /// </summary>
    [Table(Name = @"""main"".U_User")]
    public partial class UUser : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Userid;

        private string _Password;

        private string _Name;

        private string _Email;

        private long _Power = 0;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnUseridChanging(string value);
        partial void OnUseridChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnPowerChanging(long value);
        partial void OnPowerChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public UUser()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Userid in the schema.
        /// </summary>
        [Column(Name = @"userid", Storage = "_Userid", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Userid
        {
            get
            {
                return this._Userid;
            }
            set
            {
                if (this._Userid != value)
                {
                    this.OnUseridChanging(value);
                    this.SendPropertyChanging("Userid");
                    this._Userid = value;
                    this.SendPropertyChanged("Userid");
                    this.OnUseridChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"password", Storage = "_Password", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Power in the schema.
        /// </summary>
        [Column(Name = @"power", Storage = "_Power", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Power
        {
            get
            {
                return this._Power;
            }
            set
            {
                if (this._Power != value)
                {
                    this.OnPowerChanging(value);
                    this.SendPropertyChanging("Power");
                    this._Power = value;
                    this.SendPropertyChanged("Power");
                    this.OnPowerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.UPower in the schema.
    /// </summary>
    [Table(Name = @"""main"".U_Power")]
    public partial class UPower : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _Powerid;

        private string _Ableuser;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnPoweridChanging(long value);
        partial void OnPoweridChanged();
        partial void OnAbleuserChanging(string value);
        partial void OnAbleuserChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public UPower()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Powerid in the schema.
        /// </summary>
        [Column(Name = @"powerid", Storage = "_Powerid", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Powerid
        {
            get
            {
                return this._Powerid;
            }
            set
            {
                if (this._Powerid != value)
                {
                    this.OnPoweridChanging(value);
                    this.SendPropertyChanging("Powerid");
                    this._Powerid = value;
                    this.SendPropertyChanged("Powerid");
                    this.OnPoweridChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ableuser in the schema.
        /// </summary>
        [Column(Name = @"ableuser", Storage = "_Ableuser", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ableuser
        {
            get
            {
                return this._Ableuser;
            }
            set
            {
                if (this._Ableuser != value)
                {
                    this.OnAbleuserChanging(value);
                    this.SendPropertyChanging("Ableuser");
                    this._Ableuser = value;
                    this.SendPropertyChanged("Ableuser");
                    this.OnAbleuserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.UVisiter in the schema.
    /// </summary>
    [Table(Name = @"""main"".U_Visiter")]
    public partial class UVisiter : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Ip;

        private string _Country;

        private string _Province;

        private string _City;

        private string _Mno;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnIpChanging(string value);
        partial void OnIpChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnProvinceChanging(string value);
        partial void OnProvinceChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnMnoChanging(string value);
        partial void OnMnoChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public UVisiter()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Ip in the schema.
        /// </summary>
        [Column(Name = @"ip", Storage = "_Ip", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ip
        {
            get
            {
                return this._Ip;
            }
            set
            {
                if (this._Ip != value)
                {
                    this.OnIpChanging(value);
                    this.SendPropertyChanging("Ip");
                    this._Ip = value;
                    this.SendPropertyChanged("Ip");
                    this.OnIpChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Name = @"country", Storage = "_Country", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging("Country");
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Province in the schema.
        /// </summary>
        [Column(Name = @"province", Storage = "_Province", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Province
        {
            get
            {
                return this._Province;
            }
            set
            {
                if (this._Province != value)
                {
                    this.OnProvinceChanging(value);
                    this.SendPropertyChanging("Province");
                    this._Province = value;
                    this.SendPropertyChanged("Province");
                    this.OnProvinceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Name = @"city", Storage = "_City", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging("City");
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mno in the schema.
        /// </summary>
        [Column(Name = @"mno", Storage = "_Mno", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Mno
        {
            get
            {
                return this._Mno;
            }
            set
            {
                if (this._Mno != value)
                {
                    this.OnMnoChanging(value);
                    this.SendPropertyChanging("Mno");
                    this._Mno = value;
                    this.SendPropertyChanged("Mno");
                    this.OnMnoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.BParam in the schema.
    /// </summary>
    [Table(Name = @"""main"".B_Params")]
    public partial class BParam : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _Pid;

        private string _Name;

        private string _Key;

        private string _Describe;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnPidChanging(long value);
        partial void OnPidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnKeyChanging(string value);
        partial void OnKeyChanged();
        partial void OnDescribeChanging(string value);
        partial void OnDescribeChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public BParam()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Pid in the schema.
        /// </summary>
        [Column(Name = @"pid", Storage = "_Pid", CanBeNull = false, DbType = "BIGINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Pid
        {
            get
            {
                return this._Pid;
            }
            set
            {
                if (this._Pid != value)
                {
                    this.OnPidChanging(value);
                    this.SendPropertyChanging("Pid");
                    this._Pid = value;
                    this.SendPropertyChanged("Pid");
                    this.OnPidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Key in the schema.
        /// </summary>
        [Column(Name = @"""key""", Storage = "_Key", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Key
        {
            get
            {
                return this._Key;
            }
            set
            {
                if (this._Key != value)
                {
                    this.OnKeyChanging(value);
                    this.SendPropertyChanging("Key");
                    this._Key = value;
                    this.SendPropertyChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Describe in the schema.
        /// </summary>
        [Column(Name = @"describe", Storage = "_Describe", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Describe
        {
            get
            {
                return this._Describe;
            }
            set
            {
                if (this._Describe != value)
                {
                    this.OnDescribeChanging(value);
                    this.SendPropertyChanging("Describe");
                    this._Describe = value;
                    this.SendPropertyChanged("Describe");
                    this.OnDescribeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.DMsSQL in the schema.
    /// </summary>
    [Table(Name = @"""main"".D_MsSQL")]
    public partial class DMsSQL : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Group;

        private string _Active;

        private string _Sql;

        private string _Pid;

        private int _To = 0;

        private string _Apiname;

        private string _Timekey;

        private string _Totalkey;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnGroupChanging(string value);
        partial void OnGroupChanged();
        partial void OnActiveChanging(string value);
        partial void OnActiveChanged();
        partial void OnSqlChanging(string value);
        partial void OnSqlChanged();
        partial void OnPidChanging(string value);
        partial void OnPidChanged();
        partial void OnToChanging(int value);
        partial void OnToChanged();
        partial void OnApinameChanging(string value);
        partial void OnApinameChanged();
        partial void OnTimekeyChanging(string value);
        partial void OnTimekeyChanged();
        partial void OnTotalkeyChanging(string value);
        partial void OnTotalkeyChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public DMsSQL()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Group in the schema.
        /// </summary>
        [Column(Name = @"""group""", Storage = "_Group", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Group
        {
            get
            {
                return this._Group;
            }
            set
            {
                if (this._Group != value)
                {
                    this.OnGroupChanging(value);
                    this.SendPropertyChanging("Group");
                    this._Group = value;
                    this.SendPropertyChanged("Group");
                    this.OnGroupChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [Column(Name = @"active", Storage = "_Active", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging("Active");
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sql in the schema.
        /// </summary>
        [Column(Name = @"sql", Storage = "_Sql", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Sql
        {
            get
            {
                return this._Sql;
            }
            set
            {
                if (this._Sql != value)
                {
                    this.OnSqlChanging(value);
                    this.SendPropertyChanging("Sql");
                    this._Sql = value;
                    this.SendPropertyChanged("Sql");
                    this.OnSqlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Pid in the schema.
        /// </summary>
        [Column(Name = @"pid", Storage = "_Pid", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Pid
        {
            get
            {
                return this._Pid;
            }
            set
            {
                if (this._Pid != value)
                {
                    this.OnPidChanging(value);
                    this.SendPropertyChanging("Pid");
                    this._Pid = value;
                    this.SendPropertyChanged("Pid");
                    this.OnPidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for To in the schema.
        /// </summary>
        [Column(Name = @"""to""", Storage = "_To", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int To
        {
            get
            {
                return this._To;
            }
            set
            {
                if (this._To != value)
                {
                    this.OnToChanging(value);
                    this.SendPropertyChanging("To");
                    this._To = value;
                    this.SendPropertyChanged("To");
                    this.OnToChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Apiname in the schema.
        /// </summary>
        [Column(Name = @"apiname", Storage = "_Apiname", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Apiname
        {
            get
            {
                return this._Apiname;
            }
            set
            {
                if (this._Apiname != value)
                {
                    this.OnApinameChanging(value);
                    this.SendPropertyChanging("Apiname");
                    this._Apiname = value;
                    this.SendPropertyChanged("Apiname");
                    this.OnApinameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Timekey in the schema.
        /// </summary>
        [Column(Name = @"timekey", Storage = "_Timekey", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Timekey
        {
            get
            {
                return this._Timekey;
            }
            set
            {
                if (this._Timekey != value)
                {
                    this.OnTimekeyChanging(value);
                    this.SendPropertyChanging("Timekey");
                    this._Timekey = value;
                    this.SendPropertyChanged("Timekey");
                    this.OnTimekeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Totalkey in the schema.
        /// </summary>
        [Column(Name = @"totalkey", Storage = "_Totalkey", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Totalkey
        {
            get
            {
                return this._Totalkey;
            }
            set
            {
                if (this._Totalkey != value)
                {
                    this.OnTotalkeyChanging(value);
                    this.SendPropertyChanging("Totalkey");
                    this._Totalkey = value;
                    this.SendPropertyChanged("Totalkey");
                    this.OnTotalkeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.CBar in the schema.
    /// </summary>
    [Table(Name = @"""main"".C_Bar")]
    public partial class CBar : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Cid;

        private string _Name;

        private string _Prefix;

        private string _X;

        private string _Y;

        private string _Suffix;

        private string _Otherdata;

        private string _Describe;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnCidChanging(string value);
        partial void OnCidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPrefixChanging(string value);
        partial void OnPrefixChanged();
        partial void OnXChanging(string value);
        partial void OnXChanged();
        partial void OnYChanging(string value);
        partial void OnYChanged();
        partial void OnSuffixChanging(string value);
        partial void OnSuffixChanged();
        partial void OnOtherdataChanging(string value);
        partial void OnOtherdataChanged();
        partial void OnDescribeChanging(string value);
        partial void OnDescribeChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public CBar()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Cid in the schema.
        /// </summary>
        [Column(Name = @"cid", Storage = "_Cid", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Cid
        {
            get
            {
                return this._Cid;
            }
            set
            {
                if (this._Cid != value)
                {
                    this.OnCidChanging(value);
                    this.SendPropertyChanging("Cid");
                    this._Cid = value;
                    this.SendPropertyChanged("Cid");
                    this.OnCidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Prefix in the schema.
        /// </summary>
        [Column(Name = @"prefix", Storage = "_Prefix", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Prefix
        {
            get
            {
                return this._Prefix;
            }
            set
            {
                if (this._Prefix != value)
                {
                    this.OnPrefixChanging(value);
                    this.SendPropertyChanging("Prefix");
                    this._Prefix = value;
                    this.SendPropertyChanged("Prefix");
                    this.OnPrefixChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for X in the schema.
        /// </summary>
        [Column(Name = @"x", Storage = "_X", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string X
        {
            get
            {
                return this._X;
            }
            set
            {
                if (this._X != value)
                {
                    this.OnXChanging(value);
                    this.SendPropertyChanging("X");
                    this._X = value;
                    this.SendPropertyChanged("X");
                    this.OnXChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Y in the schema.
        /// </summary>
        [Column(Name = @"y", Storage = "_Y", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Y
        {
            get
            {
                return this._Y;
            }
            set
            {
                if (this._Y != value)
                {
                    this.OnYChanging(value);
                    this.SendPropertyChanging("Y");
                    this._Y = value;
                    this.SendPropertyChanged("Y");
                    this.OnYChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Suffix in the schema.
        /// </summary>
        [Column(Storage = "_Suffix", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Suffix
        {
            get
            {
                return this._Suffix;
            }
            set
            {
                if (this._Suffix != value)
                {
                    this.OnSuffixChanging(value);
                    this.SendPropertyChanging("Suffix");
                    this._Suffix = value;
                    this.SendPropertyChanged("Suffix");
                    this.OnSuffixChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Otherdata in the schema.
        /// </summary>
        [Column(Name = @"otherdata", Storage = "_Otherdata", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Otherdata
        {
            get
            {
                return this._Otherdata;
            }
            set
            {
                if (this._Otherdata != value)
                {
                    this.OnOtherdataChanging(value);
                    this.SendPropertyChanging("Otherdata");
                    this._Otherdata = value;
                    this.SendPropertyChanged("Otherdata");
                    this.OnOtherdataChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Describe in the schema.
        /// </summary>
        [Column(Name = @"describe", Storage = "_Describe", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Describe
        {
            get
            {
                return this._Describe;
            }
            set
            {
                if (this._Describe != value)
                {
                    this.OnDescribeChanging(value);
                    this.SendPropertyChanging("Describe");
                    this._Describe = value;
                    this.SendPropertyChanged("Describe");
                    this.OnDescribeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.CCircle in the schema.
    /// </summary>
    [Table(Name = @"""main"".C_Circle")]
    public partial class CCircle : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Cid;

        private string _Name;

        private string _Prefix;

        private string _Data;

        private string _Suffix;

        private string _Otherdata;

        private string _Describe;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnCidChanging(string value);
        partial void OnCidChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPrefixChanging(string value);
        partial void OnPrefixChanged();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        partial void OnSuffixChanging(string value);
        partial void OnSuffixChanged();
        partial void OnOtherdataChanging(string value);
        partial void OnOtherdataChanged();
        partial void OnDescribeChanging(string value);
        partial void OnDescribeChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public CCircle()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Cid in the schema.
        /// </summary>
        [Column(Name = @"cid", Storage = "_Cid", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Cid
        {
            get
            {
                return this._Cid;
            }
            set
            {
                if (this._Cid != value)
                {
                    this.OnCidChanging(value);
                    this.SendPropertyChanging("Cid");
                    this._Cid = value;
                    this.SendPropertyChanged("Cid");
                    this.OnCidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Prefix in the schema.
        /// </summary>
        [Column(Name = @"prefix", Storage = "_Prefix", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Prefix
        {
            get
            {
                return this._Prefix;
            }
            set
            {
                if (this._Prefix != value)
                {
                    this.OnPrefixChanging(value);
                    this.SendPropertyChanging("Prefix");
                    this._Prefix = value;
                    this.SendPropertyChanged("Prefix");
                    this.OnPrefixChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Data in the schema.
        /// </summary>
        [Column(Name = @"data", Storage = "_Data", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if (this._Data != value)
                {
                    this.OnDataChanging(value);
                    this.SendPropertyChanging("Data");
                    this._Data = value;
                    this.SendPropertyChanged("Data");
                    this.OnDataChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Suffix in the schema.
        /// </summary>
        [Column(Name = @"suffix", Storage = "_Suffix", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Suffix
        {
            get
            {
                return this._Suffix;
            }
            set
            {
                if (this._Suffix != value)
                {
                    this.OnSuffixChanging(value);
                    this.SendPropertyChanging("Suffix");
                    this._Suffix = value;
                    this.SendPropertyChanged("Suffix");
                    this.OnSuffixChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Otherdata in the schema.
        /// </summary>
        [Column(Name = @"otherdata", Storage = "_Otherdata", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Otherdata
        {
            get
            {
                return this._Otherdata;
            }
            set
            {
                if (this._Otherdata != value)
                {
                    this.OnOtherdataChanging(value);
                    this.SendPropertyChanging("Otherdata");
                    this._Otherdata = value;
                    this.SendPropertyChanged("Otherdata");
                    this.OnOtherdataChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Describe in the schema.
        /// </summary>
        [Column(Name = @"describe", Storage = "_Describe", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Describe
        {
            get
            {
                return this._Describe;
            }
            set
            {
                if (this._Describe != value)
                {
                    this.OnDescribeChanging(value);
                    this.SendPropertyChanging("Describe");
                    this._Describe = value;
                    this.SendPropertyChanged("Describe");
                    this.OnDescribeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.IApi in the schema.
    /// </summary>
    [Table(Name = @"""main"".I_Api")]
    public partial class IApi : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Apikey;

        private string _Apiname;

        private string _Apidescribe;

        private string _Chart;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnApikeyChanging(string value);
        partial void OnApikeyChanged();
        partial void OnApinameChanging(string value);
        partial void OnApinameChanged();
        partial void OnApidescribeChanging(string value);
        partial void OnApidescribeChanged();
        partial void OnChartChanging(string value);
        partial void OnChartChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public IApi()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Apikey in the schema.
        /// </summary>
        [Column(Name = @"apikey", Storage = "_Apikey", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Apikey
        {
            get
            {
                return this._Apikey;
            }
            set
            {
                if (this._Apikey != value)
                {
                    this.OnApikeyChanging(value);
                    this.SendPropertyChanging("Apikey");
                    this._Apikey = value;
                    this.SendPropertyChanged("Apikey");
                    this.OnApikeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Apiname in the schema.
        /// </summary>
        [Column(Name = @"apiname", Storage = "_Apiname", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Apiname
        {
            get
            {
                return this._Apiname;
            }
            set
            {
                if (this._Apiname != value)
                {
                    this.OnApinameChanging(value);
                    this.SendPropertyChanging("Apiname");
                    this._Apiname = value;
                    this.SendPropertyChanged("Apiname");
                    this.OnApinameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Apidescribe in the schema.
        /// </summary>
        [Column(Name = @"apidescribe", Storage = "_Apidescribe", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Apidescribe
        {
            get
            {
                return this._Apidescribe;
            }
            set
            {
                if (this._Apidescribe != value)
                {
                    this.OnApidescribeChanging(value);
                    this.SendPropertyChanging("Apidescribe");
                    this._Apidescribe = value;
                    this.SendPropertyChanged("Apidescribe");
                    this.OnApidescribeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Chart in the schema.
        /// </summary>
        [Column(Name = @"chart", Storage = "_Chart", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Chart
        {
            get
            {
                return this._Chart;
            }
            set
            {
                if (this._Chart != value)
                {
                    this.OnChartChanging(value);
                    this.SendPropertyChanging("Chart");
                    this._Chart = value;
                    this.SendPropertyChanged("Chart");
                    this.OnChartChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.BGroup in the schema.
    /// </summary>
    [Table(Name = @"""main"".B_Group")]
    public partial class BGroup : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Gid;

        private string _Gname;

        private string _Gdescribe;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnGidChanging(string value);
        partial void OnGidChanged();
        partial void OnGnameChanging(string value);
        partial void OnGnameChanged();
        partial void OnGdescribeChanging(string value);
        partial void OnGdescribeChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public BGroup()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Gid in the schema.
        /// </summary>
        [Column(Name = @"gid", Storage = "_Gid", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Gid
        {
            get
            {
                return this._Gid;
            }
            set
            {
                if (this._Gid != value)
                {
                    this.OnGidChanging(value);
                    this.SendPropertyChanging("Gid");
                    this._Gid = value;
                    this.SendPropertyChanged("Gid");
                    this.OnGidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gname in the schema.
        /// </summary>
        [Column(Name = @"gname", Storage = "_Gname", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Gname
        {
            get
            {
                return this._Gname;
            }
            set
            {
                if (this._Gname != value)
                {
                    this.OnGnameChanging(value);
                    this.SendPropertyChanging("Gname");
                    this._Gname = value;
                    this.SendPropertyChanged("Gname");
                    this.OnGnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gdescribe in the schema.
        /// </summary>
        [Column(Name = @"gdescribe", Storage = "_Gdescribe", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Gdescribe
        {
            get
            {
                return this._Gdescribe;
            }
            set
            {
                if (this._Gdescribe != value)
                {
                    this.OnGdescribeChanging(value);
                    this.SendPropertyChanging("Gdescribe");
                    this._Gdescribe = value;
                    this.SendPropertyChanged("Gdescribe");
                    this.OnGdescribeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for EntityLocal.BActive in the schema.
    /// </summary>
    [Table(Name = @"""main"".B_Active")]
    public partial class BActive : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Aid;

        private string _Gid;

        private string _Aname;

        private string _Adescribe;

        private string _Operator;

        private System.DateTime _Systime;

        private System.DateTime _Createtime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnAidChanging(string value);
        partial void OnAidChanged();
        partial void OnGidChanging(string value);
        partial void OnGidChanged();
        partial void OnAnameChanging(string value);
        partial void OnAnameChanged();
        partial void OnAdescribeChanging(string value);
        partial void OnAdescribeChanged();
        partial void OnOperatorChanging(string value);
        partial void OnOperatorChanged();
        partial void OnSystimeChanging(System.DateTime value);
        partial void OnSystimeChanged();
        partial void OnCreatetimeChanging(System.DateTime value);
        partial void OnCreatetimeChanged();
        #endregion

        public BActive()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Aid in the schema.
        /// </summary>
        [Column(Name = @"aid", Storage = "_Aid", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Aid
        {
            get
            {
                return this._Aid;
            }
            set
            {
                if (this._Aid != value)
                {
                    this.OnAidChanging(value);
                    this.SendPropertyChanging("Aid");
                    this._Aid = value;
                    this.SendPropertyChanged("Aid");
                    this.OnAidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gid in the schema.
        /// </summary>
        [Column(Name = @"gid", Storage = "_Gid", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Gid
        {
            get
            {
                return this._Gid;
            }
            set
            {
                if (this._Gid != value)
                {
                    this.OnGidChanging(value);
                    this.SendPropertyChanging("Gid");
                    this._Gid = value;
                    this.SendPropertyChanged("Gid");
                    this.OnGidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Aname in the schema.
        /// </summary>
        [Column(Name = @"aname", Storage = "_Aname", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Aname
        {
            get
            {
                return this._Aname;
            }
            set
            {
                if (this._Aname != value)
                {
                    this.OnAnameChanging(value);
                    this.SendPropertyChanging("Aname");
                    this._Aname = value;
                    this.SendPropertyChanged("Aname");
                    this.OnAnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Adescribe in the schema.
        /// </summary>
        [Column(Name = @"adescribe", Storage = "_Adescribe", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Adescribe
        {
            get
            {
                return this._Adescribe;
            }
            set
            {
                if (this._Adescribe != value)
                {
                    this.OnAdescribeChanging(value);
                    this.SendPropertyChanging("Adescribe");
                    this._Adescribe = value;
                    this.SendPropertyChanged("Adescribe");
                    this.OnAdescribeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Operator in the schema.
        /// </summary>
        [Column(Name = @"operator", Storage = "_Operator", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Operator
        {
            get
            {
                return this._Operator;
            }
            set
            {
                if (this._Operator != value)
                {
                    this.OnOperatorChanging(value);
                    this.SendPropertyChanging("Operator");
                    this._Operator = value;
                    this.SendPropertyChanged("Operator");
                    this.OnOperatorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Systime in the schema.
        /// </summary>
        [Column(Name = @"systime", Storage = "_Systime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Systime
        {
            get
            {
                return this._Systime;
            }
            set
            {
                if (this._Systime != value)
                {
                    this.OnSystimeChanging(value);
                    this.SendPropertyChanging("Systime");
                    this._Systime = value;
                    this.SendPropertyChanged("Systime");
                    this.OnSystimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Createtime in the schema.
        /// </summary>
        [Column(Name = @"createtime", Storage = "_Createtime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Createtime
        {
            get
            {
                return this._Createtime;
            }
            set
            {
                if (this._Createtime != value)
                {
                    this.OnCreatetimeChanging(value);
                    this.SendPropertyChanging("Createtime");
                    this._Createtime = value;
                    this.SendPropertyChanged("Createtime");
                    this.OnCreatetimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
